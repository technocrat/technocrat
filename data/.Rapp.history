c[1][1][1]
c[[[1]]]
c[[1]]]
c[1]
c[1][1]
c[1][1][1]
c[1][1][1][1]
c[1][1][1][1][1]
str(c[1][1][1][1][1])
c[1]$p.value
c[1]$runs
c[1]$parameter
c[0]$parameter
c[1][1]$statistic
c[1]
str(c[1])
class(c[1])
c[1]$method
help(runs.test)
c <- lapply(b,runs.test(plot=TRUE))
runs.test(sweepotato$yield,plot=TRUE)
runs.test(sweetpotato$yield,plot=TRUE)
??htest
tidy(c)
library(tidyverse)
tidy(c)
glance(c)
library(broom)
tidy(c)
glance(c)
tt <- t.test(rnorm(10))#
tidy(tt)#
glance(tt)  # same output for all htests
tt <- t.test(mpg ~ am, data = mtcars)#
tidy(tt)
class(tt)
class(c)
class(c)[1]
help(runs.test)
d <- runs.test(sweetpotato$yield)
tidy(d)
d
d$1
d$runs
d <- runs.test(sweetpotato$yield)
d$runs
class(d)
str(c)
c[10]
tidy(c[10])
tidy(c[10][1])
d <- runs.test(sweetpotato$yield)
head(b)
c <- lapply(b,runs.test)
str(c[0])
str(c[1])
c[1]..$runs
c[1]$runs
colnames(c)
head(c)
c[[1]]
tidy(c[[1]])
d <- lapply(c,tidy)
head(d)
class(d)
e <- as.tibble(d)
d
e <- unlist(d)
head(e)
tail(e)
e <- as.tibble(e)
e
d[0][5]
d[1][5]
d[[1]]
d[[1]]$p.value
save(d, file = "runs.Rda")
hquit
quit()
library(tidyverse)#
library(DBI)#
library(RMySQL)#
library(FacoMineR)#
drv <- dbDriver("MySQL")#
con <- dbConnect(drv, username="root", password="", dbname ="dlf", host="localhost")#
res <- dbGetQuery(con, "SELECT fico, cltv, orate, obal, deal FROM loans")#
cs <- as.tibble(res)
res <- dbGetQuery(con, "SELECT ctapeno, deal, remit, fico, dti, cltv, orate, obal grade, round(zip/100,0), dtype, fpd,ltype, pmiflag, ppp, otype, purpose, ptype FROM y6c")#
cs <- as.tibble(res)#
require(binaryLogic)#
require(stringi)#
reports <- cs %>% rowwise %>% mutate(repbin = toString(as.binary(remit))) %>% rowwise %>% mutate(repstr = str_replace_all(repbin,"[, ]",'')) %>% mutate(reports = str_count(repstr)) %>% select(ctapeno, repstr, reports)#
perf <- reports %>% mutate(category = case_when(str_detect(repstr, '111$') ~ "C", str_count(repstr, '0') <= 9 ~ "B", str_count(repstr, '0') > 9 ~ "A")) %>% select(ctapeno, category)#
y6rf <- cs %>% inner_join(perf, by = "ctapeno")#
y6rf <- y6rf %>% mutate(zip = as.character(`round(zip/100,0)`), pmiflag = as.character(pmiflag), ppp = as.character(ppp), perf = category, grade = as.character((grade)))#
y6rf <- y6rf %>% select(ctapeno, deal,fico,dti,cltv,obal, orate, grade, dtype,fpd,ltype, pmiflag, ppp,  otype, purpose, ptype, zip, perf)#
dbWriteTable(con, "loans", y6rf) #
test#
res <- dbGetQuery(con, "SELECT * from loans limit 25")
res
y6rf
y6rf <- y6rf %>% select(ctapeno, deal,fico,dti,cltv,obal, orate, grade, dtype,fpd,ltype, pmiflag, ppp,  otype, purpose, ptype, zip, perf)
res <- dbGetQuery(con, "SELECT ctapeno, deal, remit, fico, dti, cltv, orate, obal, grade, round(zip/100,0), dtype, fpd,ltype, pmiflag, ppp, otype, purpose, ptype FROM y6c")#
cs <- as.tibble(res)#
require(binaryLogic)#
require(stringi)#
reports <- cs %>% rowwise %>% mutate(repbin = toString(as.binary(remit))) %>% rowwise %>% mutate(repstr = str_replace_all(repbin,"[, ]",'')) %>% mutate(reports = str_count(repstr)) %>% select(ctapeno, repstr, reports)#
perf <- reports %>% mutate(category = case_when(str_detect(repstr, '111$') ~ "C", str_count(repstr, '0') <= 9 ~ "B", str_count(repstr, '0') > 9 ~ "A")) %>% select(ctapeno, category)#
y6rf <- cs %>% inner_join(perf, by = "ctapeno")#
y6rf <- y6rf %>% mutate(zip = as.character(`round(zip/100,0)`), pmiflag = as.character(pmiflag), ppp = as.character(ppp), perf = category, grade = as.character((grade)))#
y6rf <- y6rf %>% select(ctapeno, deal,fico,dti,cltv,obal, orate, grade, dtype,fpd,ltype, pmiflag, ppp,  otype, purpose, ptype, zip, perf)
y6rf
dbWriteTable(con, "loans", y6rf) #
#test#
res <- dbGetQuery(con, "SELECT * from loans limit 25")
dbWriteTable(con, "loans", y6rf) #
#test#
res <- dbGetQuery(con, "SELECT * from loans limit 25", overwrite = TRUE)
dbWriteTable(con, "loans", y6rf) #
#test#
res <- dbGetQuery(con, "SELECT * from loans limit 25")
res
quit()
library(tidyverse)#
library(DBI)#
library(RMySQL)#
library(FacoMineR)#
drv <- dbDriver("MySQL")#
con <- dbConnect(drv, username="root", password="", dbname ="dlf", host="localhost")#
res <- dbGetQuery(con, "SELECT fico, cltv, orate, obal, deal FROM loans")#
cs <- as.tibble(res)
cs
help(PCA)
??PCA
PCA(cs)
rcess
sessionInfo()
update.packages()
library(FactoMineR)
PCA(cs)
pca
cs
qs <- cs %>% select (fico,cltv,orate)
res <- dbGetQuery(con, "SELECT fico, cltv, orate, obal, dti, FROM loans")#
cs <- as.tibble(res)
res <- dbGetQuery(con, "SELECT fico, cltv, orate, obal, dti FROM loans")#
cs <- as.tibble(res)
PCA(cs)
csp <- PCA(cs)
summary(csp)
csp$call
csp
csp$cll$esart.type
csp$call$esart.type
csp$call$ecart.type
csp$var
lapply(dimdesc(csp),lappy,round,2)
lapply(dimdesc(csp),lapply,round,2)
?biplot
quit()
library(tidyverse)#
library(DBI)#
library(RMySQL)#
#library(FacoMineR)#
drv <- dbDriver("MySQL")#
con <- dbConnect(drv, username="root", password="", dbname ="dlf", host="localhost")#
res <- dbGetQuery(con, "SELECT fico, cltv, orate, obal, dti FROM loans")#
cs <- as.tibble(res)
cs.pca <- prcomp(cs.pca, scale = TRUE)
cs.pca
cs
cs.pca <- prcomp(cs, scale = TRUE)
cs.pca
cs.pca$rotation
biplot(cs.pca, scale = 0)
cs.val <- cs.pca$sdev*2
cs.val
cs.pve <- cs.var/sum(cs.var)
cs.var <- cs.pca$sdev*2
rm(cs.val)
cs.pre = cs.var/sum(cs.var)
cs.pre
plot(cs.pre, xlab = "Principal Component", ylab="Porportion of Variance Explained"), ylim = c(0,1), type ='b')
plot(cs.pre, xlim = "Principal Component", ylab="Porportion of Variance Explained"), ylim = c(0,1), type ='b')
plot(cs.pre, xlim = "Principal Component", ylab="Porportion of Variance Explained", ylim = c(0,1), type ='b')
plot(cs.pre, xlab = "Principal Component", ylab="Porportion of Variance Explained", ylim = c(0,1), type ='b')
plot(cumsum(cs.pre), xlab = "Principal Component", ylab="Porportion of Variance Explained", ylim = c(0,1), type ='b')
css <- sample(cs,1000)
nrow(cs)
css <- sample(cs,100)
css <- sample(cs,1000)
css <- sample(cs,1000, replace = TRUE)
css <- sample(css,1000, replace = TRUE)#
css.pca <- prcomp(cs, scale = TRUE)#
biplot(css.pca, scale = 0)#
css.val <- css.pca$sdev*2
css
cs
css <- sample_n(cs,1000)
css
css.pca <- prcomp(cs, scale = TRUE)
css.pca
biplot(css.pca, scale = 0)
css <- sample_n(cs,100)#
css.pca <- prcomp(cs, scale = TRUE)#
css.val <- css.pca$sdev*2#
css.val <- css.pca$sdev*2#
css.val#
css.pve <- css.var/sum(css.var)#
css.var <- css.pca$sdev*2#
css.pre = css.var/sum(css.var)#
plsot(css.pre, xlab = "Principal Component", ylab="Porportion of Variance Explained", ylim = c(0,1), type ='b')#
plsot(cumsum(css.pre), xlab = "Principal Component", ylab="Porportion of Variance Explained", ylim = c(0,1), type ='b')
css <- sample_n(cs,100)#
css.pca <- prcomp(cs, scale = TRUE)#
css.val <- css.pca$sdev*2
css.pve <- css.var/sum(css.var)#
css.var <- css.pca$sdev*2
css <- sample_n(cs,100)#
css.pca <- prcomp(cs, scale = TRUE)#
css.val <- css.pca$sdev*2#
css.var <- css.pca$sdev*2#
css.pve <- css.var/sum(css.var)#
plsot(css.pve, xlab = "Principal Component", ylab="Porportion of Variance Explained", ylim = c(0,1), type ='b')#
plsot(cumsum(css.pve), xlab = "Principal Component", ylab="Porportion of Variance Explained", ylim = c(0,1), type ='b')
css <- sample_n(cs,100)#
css.pca <- prcomp(cs, scale = TRUE)#
css.val <- css.pca$sdev*2#
css.var <- css.pca$sdev*2#
css.pve <- css.var/sum(css.var)#
plot(css.pve, xlab = "Principal Component", ylab="Porportion of Variance Explained", ylim = c(0,1), type ='b')#
plot(cumsum(css.pve), xlab = "Principal Component", ylab="Porportion of Variance Explained", ylim = c(0,1), type ='b')
css <- sample_n(cs,100)#
css.pca <- prcomp(cs, scale = TRUE)#
css.val <- css.pca$sdev*2#
css.var <- css.pca$sdev*2#
css.pve <- css.var/sum(css.var)#
plot(css.pve, xlab = "Principal Component", ylab="Porportion of Variance Explained", ylim = c(0,1), type ='b')
css <- sample_n(cs,100)#
css.pca <- prcomp(cs, scale = TRUE)#
css.var <- css.pca$sdev*2#
css.pve <- css.var/sum(css.var)#
plot(css.pve, xlab = "Principal Component", ylab="Porportion of Variance Explained", ylim = c(0,1), type ='b')
biplot(css.pca, scale = 0)
biplot(css.pve, scale = 0)
css <- sample_n(cs,100)#
pr.out <- prcomp(css, scale = TRUE)#
biplot(pr.out, scale = 0)#
pr.var <- pr.out$sdev*2#
pre <- pr.var/sum(pr.var)
css <- sample_n(cs,1000)#
pr.out <- prcomp(css, scale = TRUE)#
biplot(pr.out, scale = 0)#
pr.var <- pr.out$sdev*2#
pre <- pr.var/sum(pr.var)
css <- sample_n(cs,1000, replace = FALSE)#
pr.out <- prcomp(css, scale = TRUE)#
biplot(pr.out, scale = 0)#
pr.var <- pr.out$sdev*2#
pre <- pr.var/sum(pr.var)
css <- sample_n(cs,300, replace = FALSE)#
pr.out <- prcomp(css, scale = TRUE)#
biplot(pr.out, scale = 0)
par(mfrow=c(2,2))
biplot(pr.out, scale = 0)
plot(pve, xlab = "Principal Component", ylab="Porportion of Variance Explained", ylim = c(0,1), type ='b')#
#
plot(cumsum(pve), xlab = "Principal Component", ylab="Porportion of Variance Explained", ylim = c(0,1), type ='b')
pr.var <- pr.out$sdev*2#
pve <- pr.var/sum(pr.var)#
plot(pve, xlab = "Principal Component", ylab="Porportion of Variance Explained", ylim = c(0,1), type ='b')#
#
plot(cumsum(pve), xlab = "Principal Component", ylab="Porportion of Variance Explained", ylim = c(0,1), type ='b')
pve
cumsum(pve)
par(mfrow=c(2,2))
print(pr.out)
screeplot(pve)
screeplot(pr.out)
screeplot(pve)
pve
screeplot(pve)
screeplot(pr.out
)
require(graphics)
screeplot(pr.out)
screeplot(pr.out, type = "lines")
library(tidyverse)#
library(DBI)#
library(RMySQL)#
#library(FacoMineR)#
drv <- dbDriver("MySQL")#
con <- dbConnect(drv, username="root", password="", dbname ="dlf", host="localhost")#
res <- dbGetQuery(con, "SELECT fico, cltv, orate, obal, dti FROM loans")#
cs <- as.tibble(res) # cs contains only the continuous variables#
css <- sample_n(cs,300, replace = FALSE) # loadings similar with n=nrow(cs), n=1000#
# naming conventions following James et al. *An Introduction to Statistical Learning*#
#
pr.out <- prcomp(css, scale = TRUE)#
#
pr.var <- pr.out$sdev*2#
pve <- pr.var/sum(pr.var)#
par(mfrow=c(2,2)#
#
screeplot(pr.out, type = "lines")#
#
biplot(pr.out, scale = 0)#
#
plot(pve, xlab = "Principal Component", ylab="Porportion of Variance Explained", ylim = c(0,1), type ='b')#
#
plot(cumsum(pve), xlab = "Principal Component", ylab="Porportion of Variance Explained", ylim = c(0,1), type ='b')#
#
pve#
sumsum(pre)
library(tidyverse)#
library(DBI)#
library(RMySQL)#
#library(FacoMineR)#
drv <- dbDriver("MySQL")#
con <- dbConnect(drv, username="root", password="", dbname ="dlf", host="localhost")#
res <- dbGetQuery(con, "SELECT fico, cltv, orate, obal, dti FROM loans")#
cs <- as.tibble(res) # cs contains only the continuous variables#
css <- sample_n(cs,300, replace = FALSE) # loadings similar with n=nrow(cs), n=1000#
# naming conventions following James et al. *An Introduction to Statistical Learning*#
#
pr.out <- prcomp(css, scale = TRUE)#
#
pr.var <- pr.out$sdev*2#
pve <- pr.var/sum(pr.var)#
par(mfrow=c(2,2)#
#
screeplot(pr.out, type = "lines")#
#
biplot(pr.out, scale = 0)#
#
plot(pve, xlab = "Principal Component", ylab="Porportion of Variance Explained", ylim = c(0,1), type ='b')#
#
plot(cumsum(pve), xlab = "Principal Component", ylab="Porportion of Variance Explained", ylim = c(0,1), type ='b')#
#
pve#
cumsum(pre)
screeplot(pr.out, type = "lines")
screeplot(pr.out, type = "lines", main = xlab = "Principal Component", title "Screeplot")
screeplot(pr.out, type = "lines", main(xlab = "Principal Component", title "Screeplot"))
screeplot(pr.out, type = "lines", main(xlab = "Principal Component", title = "Screeplot"))
mod <- (cs$scale(orate) ~ cs$scale(obal))
summary(mod)
mod <- lm(cs$scale(orate) ~ cs$scale(obal))
mod <- lm(cs$(scale(orate)) ~ cs$(scale(obal)))
mod <- lm(cs$(scale(orate)) ~ cs$(scale(obal))
mod <- lm(cs$(scale(orate)) ~ cs$(scale(obal)))
orate_s <- cs$orate
obal_s <- cs$obal
mod <- lm(orate_s ~ obal_s)
summary(mod)
par(mfrow=c(2,2))
plot(mod)
cor(cs$obal,cs$orate)
cor(cs$obal_s,cs$orate_s)
cor(obal_s, orate_s)
cov(orate_s,obal_s)
var(orate_s,obal_s)
var(obal_s,orate_s)
var(obal,orate)
var(cs$obal,cs$orate)
cor(cs$obal,cs$orate)
cov(cs$obal,cs$orate)
cor(cs$obal,cs$orate)
sumsum(pve)
cumsum(pve)
cor(cs$FICO,cs$DTI)
cor(cs$FICO,cs$dti)
cor(cs$fico,cs$dti)
cor(cs$fico,cs$cltv)
cor(cs$dti,cs$cltv)
round(cumsum(pve),3)
round(cor(orate_s,obal_s),3)
round(cor(cs$fico,cs$cltv).3)
quit()
library(tidyverse)#
library(DBI)#
library(RMySQL)#
#library(FacoMineR)#
drv <- dbDriver("MySQL")#
con <- dbConnect(drv, username="root", password="", dbname ="dlf", host="localhost")#
res <- dbGetQuery(con, "SELECT fico, cltv, obal, dti FROM loans")#
cs <- as.tibble(res)#
#
pr.out <- prcomp(cs, scale = TRUE)#
pr.var <- pr.out$sdev*2#
pve <- pr.var/sum(pr.var)
pr.out
pr.var
pve
cum(pre)
cumsum(pre)
cumsum(pve)
screeplot(pr.out, type = "lines")
cs.k <- kmeans(cs, 3, iter.max = 20, nstart = 50)
plot(css, col=(css.k$cluster+1), main="K-Means Clustering Result with K=3, n = 9,000, nstart = 50, max.iter = 20", pch=20, cex=2)
plot(cs, col=(cs.k$cluster+1), main="K-Means Clustering Result with K=3, n = all_loans, nstart = 50, max.iter = 20", pch=20, cex=2)
cs.k <- kmeans(cs, 3, iter.max = 20, nstart = 50)
getwd()
setwd("/Users/rc/projects/technocrat/data")
save(cs.k, file = "kmeans_loans.Rda")
plot(cs, col=(cs.k$cluster+1), main="K-Means Clustering Result with K=3, n = all_loans, nstart = 50, max.iter = 20", pch=20, cex=2)
table(cs.k)
cs.k
table(cs.k$cluster)
table(cs.k$centers)
table(cs.k$size)
table(cs.k$totss)
?scatterplot
pairs(cs~fico,cltv,obal,dti)
pairs(~cs+fico+cltv+obal+dti)
pairs(~cs+cs$fico+cs$cltv+cs$obal+cs$dti)
cs
help(pairs)
pairs(~ fico + cltv + obal + dti, data = cs)
quit()
