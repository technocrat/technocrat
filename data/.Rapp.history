quit()
suppressPackageStartupMessages(library(tidyverse))#
suppressPackageStartupMessages(library(lubridate))#
library(tidyverse)#
library(lubridate)#
library(ggfortify)#
library(DBI)#
library(RMySQL)#
library(knitr)#
library(kableExtra)#
drv <- dbDriver("MySQL")#
con <- dbConnect(drv, username="root", password="", dbname ="dlf", host="localhost")#
dn <- as.tibble(dbGetQuery(con, "SELECT deal, down from y7"))##
ggplot(dn, aes(x=down)) + geom_histogram(binwidth=1)#
zerodown <- dn %>% filter(down < 0) %>% group_by(deal) %>% summarize("count" = n())#
kable(zerodown, format.args = list(big.mark = ","), caption = "Number of loans with negative values of *down* by transaction")  %>% kable_styling(bootstrap_options = "striped", full_width = F) #
rm(dn, zerodown)#
```
perf <- function(x) {ifelse (x <= 2, 1, 0)}#
y7pop <- as.tibble(dbGetQuery(con, "SELECT deal, down, fico, dti, cltv, obal, orate, fpd, +#
grade, purpose, dtype, ltype, otype, ptype, zip, metro FROM y7"))#
y7pop <- y7pop %>% filter(fico > 1) %>% mutate(fpd = as_date(fpd)) #
y7pop <- y7pop %>% mutate(down = perf(down), fico = scale(fico))#
y7pop <- y7pop %>% mutate(dti = scale(dti), cltv = scale(cltv))#
y7pop <- y7pop %>% mutate(orate = scale(orate), obal = scale(obal))#
y7pop <- y7pop %>% mutate(zip = as.character(zip), perf = as.integer(down), down = NULL)
y7
y7pop
perf <- function(x) {ifelse (x <= 2, 1, 0)}#
y7pop <- as.tibble(dbGetQuery(con, "SELECT deal, down, fico, dti, cltv, obal, orate, fpd, +#
grade, purpose, dtype, ltype, otype, ptype, zip, metro FROM y7"))#
y7pop <- y7pop %>% filter(fico > 1) %>% mutate(fpd = as_date(fpd)) #
y7pop <- y7pop %>% mutate(down = perf(down), fico = scale(fico))#
y7pop <- y7pop %>% mutate(dti = scale(dti), cltv = scale(cltv))#
y7pop <- y7pop %>% mutate(orate = scale(orate), obal = scale(obal))#
y7pop <- y7pop %>% mutate(zip = as.character(zip), perf = as.integer(down), down = NULL)
ls()
cor(y7train[,2:6])
quit()
ls()
quant.mod
quant.mod.train
ls()
par(mfrow=c(2,2))
glm.diag.plots(quant.mod.train, glmdiag = glm.diag(glmfit), subset = NULL, iden = TRUE, labels = NULL, ret = FALSE)
library(boot)
update.packages()
glm.diag.plots(quant.mod.train, glmdiag = glm.diag(glmfit), subset = NULL, iden = TRUE, labels = NULL, ret = FALSE)
glm.diag.plots(quant.mod.train, glmdiag = glm.diag(quant.mod.train), subset = NULL, iden = TRUE, labels = NULL, ret = FALSE)
data(leuk, package = "MASS")#
leuk.mod <- glm(time ~ ag-1+log10(wbc), family = Gamma(log), data = leuk)#
leuk.diag <- glm.diag(leuk.mod)#
glm.diag.plots(leuk.mod, leuk.diag)
library(DHARMa)
simulationOutput <- simulateResiduals(quant.mod.train = quant.mod.train, n = 250)
simulationOutput <- simulateResiduals(fittedModel = quant.mod.train, n = 250)
simulationOutput$scaledResiduals
plot(simulationOutput)
testUniformity(simulationOutput = simulationOutput)
testOverdispersion(simulationOutput)#
testZeroinflation(simulationOutput)#
testTemporalAutocorrelation(simulationOutput)#
testSpatialAutocorrelation(simulationOutput)
testOverdispersion(simulationOutput)
testZeroinflation(simulationOutput)
??testZeroinflation
testZeroInflation(simulationOutput)
testTemporalAutocorrelation(simulationOutput)
testSpatialAutocorrelation(simulationOutput)
simulationOutput$randomState
testUniformity(simulationOutput = simulationOutput)
summary(quant.mod.train)
plot(simulationOutput, asFactor = T)
ls()
perf
rm(leuk)
rm(leuk.diag,leuk.mod,simulationOutput)
ls()
quant.mod.train.lm <- lm(~ perf + fico + cltv + obal + orate, data = samtrain)
samtrain
nros(samtrain)
nrow(samtrain)
head(samtrain)
mod.lm <- lm(~ perf + fico + cltv + obal + orate)
mod.lm <- lm(~ perf + fico + cltv + obal + orate, data = samtrain)
foo <- cor(samtrain[,2:6])
foo
class(foo)
table(quant.mod.train.pred, samtrain$perf)
confmat <- table(quant.mod.train.pred, samtrain$perf)
class(confmat)
str(table)
str(confmat)
confmat[1]
confmat[2]
confmat[1,2]
confmat[,2]
confmat[,2][1]
confmat[,2][2]
sum(confmat)
pcthit <- funtion(m) {(m[,2][1]+m[,2][2])/sum(m)}
pcthit <- function(m) = {(m[,2][1]+m[,2][2])/sum(m)}
pcthit <- function(m) {(m[,2][1]+m[,2][2])/sum(m)}
pcthit(confmat)
1 = pcthit(confmat)
1 - pcthit(confmat)
pcthit(confmat)
str(foo)
class(foo)
srt(confmat)
str(confmat)
confmat
table(quant.mod.test.pred,samtest$perf)
table(quant.mod.train.pred,samtest$perf)
table(quant.mod.train.pred,samtrain$perf)
(19+4602)/nrow(samtest)
sum(quant.mod.test.probs > 0.75)/nrow(samtest)
mean(quant.mod.test.probs > 0.75)/nrow(samtest)
foo <- table(quant.mod.train.pred,samtrain$perf)
confmat(foo)
ls()
confmat
pcthit(confmat)
confmat.train <- confmat
rm(confmat)
confmat.test <- table(quant.mod.test.pred, samtest$perf)
pcthit(confmat.test)
confmat.test
(19+4602)/nrow(samtest)
round(pcthit(confmat.test),2)
confmat.test[2]
confmat.test[1]
confmat.test[,2]
confmat.test[,2][2]
confmat.test[,2][,2]
confmat.test[,2][1]
confmat.test[,2][1]*confmat.test[,2][2]/sum(confmat.test)
confmat.test[,2][1]*confmat.test[,2][2]
confmat.test
(19+4602)/sum(confmat.test)
(19+4602)/nrow(samtest)
pcthit
confmat.test[,1]
confmat.test[,1][1]
confmat.test[,2][2]
a <- confmat.test[,1][1]
b <- confmat.test[,2][2]
a
b
pcthit <- function(confusion_matrix) {(confusion_matrix[,1][1] + confusion_matrix[,2][2])/sum(confusion_matrix)}
pcthit(confmat.train)
pcthit(confmat.test)
pcthit <- function(confusion_matrix) {round(confusion_matrix[,1][1] + confusion_matrix[,2][2])/sum(confusion_matrix)),3}
pcthit <- function(confusion_matrix) {round(confusion_matrix[,1][1] + confusion_matrix[,2][2])/sum(confusion_matrix),3}
pcthit <- function(confusion_matrix) {round(confusion_matrix[,1][1] + confusion_matrix[,2][2])/sum(confusion_matrix),3)}
pcthit <- function(confusion_matrix) {round(confusion_matrix[,1][1] + confusion_matrix[,2][2])/sum(confusion_matrix)),3)}
pcthit <- function(confusion_matrix) {(confusion_matrix[,1][1] + confusion_matrix[,2][2])/sum(confusion_matrix)}
round(pcthit(confmat.train),3)
round(pcthit(confmat.test),3)
round(pcthit(confmat.train),4)
pcthit(confmat.train)
pcthit(confmat.test)
ls()
rm(a,,b,foo)
rm(a,b,foo)
ls()
quit()
library(tidyverse)
ls()
confmat.test
pchhit(confmat.test)
pcthit(confmat.test)
pcthit(confmat.test)[,]
pcthit(confmat.test)[,1]
pcthit(confmat.test)[,0]
pcthit(confmat.test)[0]
pcthit(confmat.test)[1]
pcthit(confmat.test)[1][1]
pcthit(confmat.test)[1][1][1]
pcthit(confmat.test)
class(pcthit(confmat.test))
str(pcthit(confmat.test))
str(pcthit(confmat.test$Named))
pcthit(confmat.test)[1]
pcthit(confmat.test)[2]
pcthit(confmat.test)[0]
help(numeric)
unname(pcthit(confmat.test))
unname(pcthit(confmat.test)[1])
unname(pcthit(confmat.test)[[0]])
pcthit(confmat.test)[[0]]
pcthit(confmat.test)[[1]]
pcthit <- function(confusion_matrix) {((confusion_matrix[,1][1] + confusion_matrix[,2][2])/sum(confusion_matrix))[[1]]}
pcthit(confmat.test)
pcthit(confmat.train)
confmat.test
nrow(samtest)
pcthit(confmat.test)
confmat.test[[1]]
confmat.test[[2]]
confmat.test[[,2]]
confmat.test[,[2]]
confmat.test[2]
confmat.test[,2]
confmat.test[,2][2]
sum(confmat.test)
pcthit <- function(confusion_matrix) {((confusion_matrix[[1]] + confusion_matrix[,2][2])/sum(confusion_matrix))[[1]]}
pcthit(confmat.test)
pcthit <- function(confusion_matrix) {((confusion_matrix[[1]] + confusion_matrix[,2][2])/sum(confusion_matrix))[[1]]}
confmat.test
(19+4602)/5614
sum(confmat.test)
(19+4602)/5612
nrow(samtest)
samtest
confmat.test
19+21+972+4602
sum(confmat.test)
nrow(samtest)
(19+4602)/5614
pcthit(confmat.test)
quit()
library(tidyverse)#
suppressPackageStartupMessages(tidyverse())#
library(lubridate)#
library(DBI)#
library(RMySQL)#
perf <- function(x) {ifelse (x <= 2, 1, 0)}#
pcthit <- function(confusion_matrix) {((confusion_matrix[[1]] + confusion_matrix[,2][2])/sum(confusion_matrix))[[1]]}#
#
drv <- dbDriver("MySQL")#
con <- dbConnect(drv, username="root", password="", dbname ="dlf", host="localhost")#
perf <- function(x) {ifelse (x <= 2, 1, 0)}#
y7pop <- as.tibble(dbGetQuery(con, "SELECT deal, down, fico, dti, cltv, obal, orate, fpd, +#
grade, purpose, dtype, ltype, otype, ptype, zip, metro FROM y7"))#
y7train <- y7pop %>% sample_frac(0.667, replace = TRUE)#
y7test <- setdiff(y7train, y7pop) #
rm(y7pop)
y7train
y7train <- y7train %>% filter(fico > 1) %>% mutate(fpd = as_date(fpd)) #
y7train <- y7train %>% mutate(perf = as.integer(perf(down)), down = NULL, fico = scale(fico))#
y7train<- y7train %>% mutate(dti = scale(dti), cltv = scale(cltv))#
y7train <- y7train %>% mutate(orate = scale(orate), obal = scale(obal))
y7train
library(xtable)
help(xtable)
library(texreg)
install.packages("texreg")
update.packages()
print(table(quant.mod.train.pred, samtrain$perf))
pcthit(table(quant.mod.train.pred, samtrain$perf))
mean(samtrain$perf)
sum(quant.mod.train.probs > 0.75)/nrow(samtrain)
sum(quant.mod.train.probs > 0.80)/nrow(samtrain)
quant.mod.test.probs=predict(quant.mod.train,samtest,type="response")
quant.mod.test.pred = rep("0", nrow(samtest))         #
quant.mod.test.pred[quant.mod.test.probs > 0.5] = "1"#
print(table(quant.mod.test.pred,samtest$perf)).
quant.mod.test.pred = rep("0", nrow(samtest))         #
quant.mod.test.pred[quant.mod.test.probs > 0.5] = "1"#
print(table(quant.mod.test.pred,samtest$perf))
library(texreg)
htmlreg(table(quant.mod.train.pred, samtrain$perf))
htmlreg(xtable(quant.mod.train.pred, samtrain$perf))
htmlreg(table(quant.mod.train.pred, samtrain$perf))
library(pander)
pander(table(quant.mod.train.pred, samtrain$perf))
quit()
ls()
getwd()
setwd("/Users/rc/projects/technocrat/data")
save(y7test)
save(y7test, file = "y7test")
save(y7train, file = y7train.Rda)
save(y7train, file = "y7train.Rda")
save(y7pop, file = "y7pop.Rda")
save(samtest, file = "y7samtest.Rda")
save(samtrain, file = "y7samtrain.Rda")
confmat.test
confmat.train
pcthit(confmat.test)
pcthit(confmat.train)
ls()
quant.mod
quant.mod.no_orate <- glm(formula = perf ~ fico + cltv + obal, family = binomial, #
    data = samtrain)
summary(quant.mod.no_orate)
quant.mod
quant.mod.train
quant.mod.no_rate
quant.mod.no_orate
samtrain
head(samtrain)
y7pop
head(y7pop)
library(leaps)
install.updates()
update.packages()
quant.train.bwd <- samtrain %>% select(perf, fico, cltv, obal, orate) %>%  regsubsets(perf ~ . ,nvmax=19,method="backward")
library(tidyverse)
quant.train.bwd <- samtrain %>% select(perf, fico, cltv, obal, orate) %>%  regsubsets(perf ~ . ,nvmax=19,method="backward")
quant.train.bwd <- samtrain %>% select(perf, fico, cltv, obal, orate) %>%  regsubsets(perf ~ + fico + cltv + obal +orate ,nvmax=19,method="backward")
library(ISLR)#
fix(Hitters)#
names(Hitters)#
dim(Hitters)#
sum(is.na(Hitters$Salary))#
Hitters=na.omit(Hitters)#
dim(Hitters)#
sum(is.na(Hitters))#
library(leaps)
regfit.full=regsubsets(Salary~.,Hitters)
regfit.full
quant.train.bwd <- samtrain %>% select(perf, fico, cltv, obal, orate) %>%  regsubsets(perf ~ . ,nvmax=19,method="backward")
head(samtrain)
samtrain_num quant.train.bwd <- samtrain %>% select(perf, fico, cltv, obal, orate) %>%  regsubsets(perf ~ . ,nvmax=19,method="backward")
quit()
